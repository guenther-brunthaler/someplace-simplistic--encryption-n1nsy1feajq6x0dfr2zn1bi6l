#! /bin/sh
version() {
	cat << ===
Version 2020.346

Copyright (c) 2020 Guenther Brunthaler. All rights reserved.

This script is free software.
Distribution is permitted under the terms of the GPLv3.
===
}

help() {
	cat << ===
$APP - POSIX shell/AWK implementation of the ARCFOUR stream cipher algorithm |
(with an extension for keys longer than 256 octets)|
|
Usage: $APP [ <options> ] [ -- ] <key_file>|
|
$APP reads binary (or text) data from standard input, encrypts or decrypts it |
using the contents of <key_file> as a binary encryption key, and writes the |
result to standard output.|
|
$APP implements an extension to the original key setup algorithm which only |
kicks in for keys longer than 256 octets: In this case, the remaining octets |
of the key will be processed in exactly the same way as the key octets |
before. Key setup will simply not stop after 256 key octets have been |
processed. Neither will it ignore the rest of the key as the original key |
setup would do.|
|
Options supported:|
|
-d <count>: Drop the initial <count> octets generated by the internal |
cryptographically secure pseudo random number generator (CSPRNG) of the |
stream cipher and do them not use for actual encryption/decryption. Defaults |
to 0. For instance, "-d 3072" (a choice recommended for better security) |
would make $APP actually implement the "ARCFOUR-drop3072" algorithm.|
|
-g <count>: Instead of encrypting/decrypting data read from standard input |
after key setup (which included honoring the -d option), just output the |
first <count> octets produced by the internal CSPRNG.|
|
-V: Show version information and exit.|
-h: Display this help and exit.|
|
$APP implements a stream cipher where encryption and decryption are the same |
operation: Applying it to plaintext produces ciphertext, applying it to |
ciphertext produces plaintext again. (Both times using the same key, of |
course)|
|
The -g option is particularly interesting in combination with the extended |
key setup, because it can be used to turn $APP into a deterministic pseudo |
random number generator which uses the contents of <key_file> as seed of |
arbitrary size.|
|
This can in turn be used for different purposes:|
|
* (pseudo-) random number generation|
* key stretching|
* salt stretching|
* key compaction|
* password-based key derivation (PBKDF)|
* hashing (cryptographically non-secure, though)|
===
}
APP=${0##*/}

set -e
trap 'test $? = 0 || echo "\"$0\" failed!" >& 2' 0

show() {
	fold -sw 66
}

exit_version() {
	version | show; exit $1
}

exit_help() {
	help | sed 's/ |$/ /' | tr -d '\n' | tr '|' '\n' | show
	echo; exit_version "$@"
}

drop=0
generate=0
while getopts d:g:hV opt
do
	case $opt in
		d) drop=$OPTARG;;
		g) generate=$OPTARG;;
		h) exit_help;;
		V) exit_version;;
		*) false || exit
	esac
done
shift `expr $OPTIND - 1 || :`

die() {
	echo "$*" >& 2
	false || exit
}

case $# in
	1) ;;
	*) exit_help `false || echo $?` >& 2
esac

test -f "$1" || die "Binary key file '$1' not found!"
