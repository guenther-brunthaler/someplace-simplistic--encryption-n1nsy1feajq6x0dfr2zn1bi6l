#! /bin/sh
version() {
	cat << ===
Version 2021.322

Copyright (c) 2021 Guenther Brunthaler. All rights reserved.

This script is free software.
Distribution is permitted under the terms of the GPLv3.
===
}

help() {
	cat << ===
$APP - POSIX shell/AWK implementation of decimal addition modulo 256|
|
Usage: $APP [ <options> ] [ -- ] [ <pass-through-count> ] < <input_stream>|
|
$APP reads ASCII decimal numbers (separated by whitespace) from standard input |
and considers them to represent binary octet values to be processed as a |
sequence of cycles, writing the result to standard output (also as ASCII |
decimal numbers).|
|
Every cycle of input numbers consists of <pass-through-count> values (defaults |
to 0) which will be put through unchanged. The next two numbers will be added |
modulo 256, outputting the result as a single value. This ends the cycle which |
will then repeat as long as there are more input values.|
|
|
Options supported:|
|
-V: Show version information and exit.|
-h: Display this help and exit.|
|
|
$APP is typically used to combine the interleaved input from two streams with |
bitwise XOR: Data value to be encrypted or decrypted, and a CSPRNG value. The |
combination of both then converts the CSPRNG effectively into a stream cipher.|
===
}
APP=${0##*/}

set -e
trap 'test $? = 0 || echo "\"$0\" failed!" >& 2' 0

show() {
	fold -sw 66
}

exit_version() {
	version | show; exit $1
}

exit_help() {
	help | sed 's/ |$/ /' | tr -d '\n' | tr '|' '\n' | show
	echo; exit_version "$@"
}

while getopts hV opt
do
	case $opt in
		h) exit_help;;
		V) exit_version;;
		*) false || exit
	esac
done
shift `expr $OPTIND - 1 || :`

put_though=0
expr x"$1" : x'[1-9][0-9]*$' > /dev/null && { put_though=$1; shift; }

case $# in
	0) ;;
	*) exit_help `false || echo $?` >& 2
esac

awk \
	-v clen=$put_though \
	-v failure=`false || echo $?` \
	-f /dev/fd/5 5<< 'EOF'

# Globals: i, i1, i2, s[256], ki, kr[128], oitems, oline, clen, cleft, 
# failure, buffer.

BEGIN {
	cleft= clen+= 2
}

{
	for (i= 1; i <= NF; ++i) {
		if (cleft > 2) {
			emit($i)
		} else if (cleft == 2) {
			buffer= $i
			buffered= 1
		} else {
			emit(mod256add(buffer, $i))
			cleft= clen
			continue
		}
		--cleft
	}
}

END {
	if (oitems) print oline
	if (cleft != clen) {
		die( \
			"incomplete cycle (" cleft " excess values" \
			" left at end of input stream)!" \
		)
	}
}

function mod256add(u1, u2) {
	if ((u1+= u2) >= 256) u1-= 256
	return u1
}

function emit(val) {
	if (oitems == 20) { print oline; oitems= 0 }
	oline= oitems++ ? oline " " val : val
}

function die(msg) {
	print msg >> "/dev/stderr"
	exit failure
}

EOF
