Secure stream encryption interface
==================================
v2021.288

Format of this text: Flowed (space before EOL indicates soft line break)

* Encryption can be done in one pass, appending the MAC after the end of the 
  ciphertext.

* Decryption, however, is necessarily a two-step process: First the MAC must 
  be verfied. And only then data decryption must be attempted.

Why?

Because the decrypted data may otherwise have been maliciously manipulated, 
posing a danger to the programs which are supposed to process the decrypted 
data.

For instance, the plaintext might have been compressed before encryption. In 
this case, the next step after decryption would naturally be decompression.

But most decompressors are complex programs. When feeding illegal bitstream to 
them, they may crash, hang, or make their process run out of memory.

Therefore, is it paramount for strong security that no decryption is actually 
performed unless the MAC has been verified.

Therefore a high-level interface is needed which allows to read the encrypted 
stream twice: Once for verifying the MAC, the second time for actual 
decryption.

* Input might come from a pipeline. In this case, the whole pipeline has to be 
  processed twice, and its output must be identical.

* Input might come from a seekable file. This allows to determine the size of 
  the ciphertext and thus the starting offset of the MAC in advance. This also 
  allows a more efficient reader implementation without internal buffer 
  copying (which is necessary otherwise because then it must alway be assumed 
  the last bytes read are part of the MAC).

* Store ciphertext and MAC in different files. That does not really accomplish 
  anything, however: The ciphertext must still be read twice.

The basic design decision is: While encryption can always be implemented as a 
1-pass streaming process, shell decryption support input from pipelines or 
should it insist on seekable files?

At first glance, the second method seems clearly more elegant: Both encryption 
and decryption could use a similar interface, using shell redirection for 
input/output, both are filters which can be part of a pipeline.

But can they?

Decryption required the input must be read twice. Which means there is an 
intrinsic asymmetry here: The decryption pipeline must be processed twice, is 
required to deliver the same input data in both cases, and the decryption 
utility must be run with different command lines in order to differentiate 
between the two phases. In addition, the result of the first phase must be 
considered before even attempting to run the second phase in case of an 
integrity failure detected by the MAC.

This does not look the streaming decryption input variant look superior any 
more!

Therefore, we drop this idea and accept different interfaces for encryption 
and decryption:

<utility> <key_file> < <plaintext> > <nonce+ciphertext+mac>

<utility> <key_file> <nonce+ciphertext+mac> > <plaintext>

This has also the advantage that no -d or -e option is required any longer; 
the number of arguments determined the encryption/decrytion mode.
