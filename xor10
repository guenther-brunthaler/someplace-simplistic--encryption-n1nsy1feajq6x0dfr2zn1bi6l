#! /bin/sh
version() {
	cat << ===
Version 2020.347

Copyright (c) 2020 Guenther Brunthaler. All rights reserved.

This script is free software.
Distribution is permitted under the terms of the GPLv3.
===
}

help() {
	cat << ===
$APP - POSIX shell/AWK implementation of decimal pairwise XOR|
|
Usage: $APP [ <options> ] [ -- ] < <input_stream>|
|
$APP reads ASCII decimal numbers (separated by whitespace) from standard |
input and considers them to represent binary octet values grouped into pairs |
of two.|
|
It then combines the values within each group with bitwise XOR, writing the |
result to standard output (also as ASCII decimal numbers).|
|
|
Options supported:|
|
-V: Show version information and exit.|
-h: Display this help and exit.|
|
|
$APP is typically used to combine the interleaved input from two streams with |
bitwise XOR: Data value to be encrypted or decrypted, and a CSPRNG value. The |
combination of both then converts the CSPRNG effectively into a stream cipher.|
===
}
APP=${0##*/}

set -e
trap 'test $? = 0 || echo "\"$0\" failed!" >& 2' 0

show() {
	fold -sw 66
}

exit_version() {
	version | show; exit $1
}

exit_help() {
	help | sed 's/ |$/ /' | tr -d '\n' | tr '|' '\n' | show
	echo; exit_version "$@"
}

while getopts hV opt
do
	case $opt in
		h) exit_help;;
		V) exit_version;;
		*) false || exit
	esac
done
shift `expr $OPTIND - 1 || :`

case $# in
	0) ;;
	*) exit_help `false || echo $?` >& 2
esac

awk -v failure=`false || echo $?` -f /dev/fd/5 5<< 'EOF'

# Globals: i, i1, i2, s[256], ki, kr[128], oitems, oline.
# "final" globals: h42o[16], xor4[16, 16], o2h4[256], o2l4[256].

BEGIN {
	make_lookup_tables()
}

{
	for (i= 1; i <= NF; ++i) {
		if (!buffered) {
			buffer= $i
			buffered= 1
		} else {
			emit(xor8(buffer, $i))
			buffered= 0
		}
	}
}

END {
	if (oitems) print oline
	if (buffered) {
		die( \
			"incomplete pair (single '" buffer "')" \
			" at end of input stream!" \
		)
	}
}

function xor8(a, b) {
	return h42o[xor4[o2h4[a], o2h4[b]]] + xor4[o2l4[a], o2l4[b]]
}

# Set up h42o[16], xor4[16, 16], o2h4[256] and o2l4[256].
function make_lookup_tables(    s, j, o, b, c, m, b1, b2, l4, h4) {
	for (o= l4= h4= 0; o != 256; ++o) {
		o2h4[o]= h4; o2l4[o]= l4
		if (l4 == 0) h42o[h4]= o
		c= m= 1
		for (i= s= 0; i < 4; m+= m) {
			b1= b[i]; b2= b[i++ + 4]
			if ((b1 || b2) && !(b1 && b2)) s+= m
		}
		xor4[h4, l4]= s
		if (++l4 == 16) { ++h4; l4= 0 }
		for (i= 0; c; ++i) {
			if (c= (s= b[i] + c) > 1) s-= 2
			b[i]= s
		}
	}
}

function emit(val) {
	if (oitems == 20) { print oline; oitems= 0 }
	oline= oitems++ ? oline " " val : val
}

function die(msg) {
	print msg >> "/dev/stderr"
	exit failure
}

EOF
